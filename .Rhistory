broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta (numerički identifikatori umjesto stringova)
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena obrade prema hitnosti (koristeći numeričke vrijednosti)
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
set_attribute("hitnost", function(attrs) {
h <- odredi_hitnost()
print(paste("Dodijeljena hitnost:", h))
return(h)
}) %>%
set_attribute("prioritet", function(attrs) {
if (is.null(attrs[["hitnost"]])) {
stop("Greška: hitnost nije definirana prije dodjele prioriteta!")
}
p <- prioritet_pacijenta(attrs[["hitnost"]])
print(paste("Dodijeljen prioritet:", p))
return(p)
}) %>%
seize("doktor", 1, priority = function(attrs) {
if (is.null(attrs[["prioritet"]])) {
stop("Greška: prioritet nije definiran prije zauzimanja doktora!")
}
print(paste("Seizing doctor with priority:", attrs[["prioritet"]]))
return(attrs[["prioritet"]])
}) %>%
timeout(function(attrs) {
if (is.null(attrs[["hitnost"]])) {
stop("Greška: hitnost nije definirana prije određivanja vremena obrade!")
}
t <- vrijeme_obrade(attrs[["hitnost"]])
print(paste("Vrijeme obrade:", t))
return(t)
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (doktori) i generatora pacijenata
hospital_sim %>%
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta (numerički identifikatori umjesto stringova)
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena obrade prema hitnosti (koristeći numeričke vrijednosti)
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
set_attribute("hitnost", function(attrs) {
h <- odredi_hitnost()
print(paste("Dodijeljena hitnost:", h))
return(h)
}) %>%
set_attribute("prioritet", function(attrs) {
if (is.null(attrs[["hitnost"]])) {
stop("Greška: hitnost nije definirana prije dodjele prioriteta!")
}
p <- prioritet_pacijenta(attrs[["hitnost"]])
print(paste("Dodijeljen prioritet:", p))
return(p)
}) %>%
seize("doktor", 1, priority = function(attrs) {
if (is.null(attrs[["prioritet"]])) {
stop("Greška: prioritet nije definiran prije zauzimanja doktora!")
}
print(paste("Seizing doctor with priority:", attrs[["prioritet"]]))
return(attrs[["prioritet"]])
}) %>%
timeout(function(attrs) {
if (is.null(attrs[["hitnost"]])) {
stop("Greška: hitnost nije definirana prije određivanja vremena obrade!")
}
t <- vrijeme_obrade(attrs[["hitnost"]])
print(paste("Vrijeme obrade:", t))
return(t)
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (doktori) i generatora pacijenata
hospital_sim %>%
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta (numerički identifikatori umjesto stringova)
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena obrade prema hitnosti (koristeći numeričke vrijednosti)
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
set_attribute("hitnost", odredi_hitnost) %>%  # Uklonjen argument attrs
set_attribute("prioritet", function(attrs) {
hitnost <- get_attribute(attrs, "hitnost")
if (is.null(hitnost)) stop("Greška: hitnost nije definirana prije dodjele prioriteta!")
p <- prioritet_pacijenta(hitnost)
print(paste("Dodijeljen prioritet:", p))
return(p)
}) %>%
seize("doktor", 1, priority = function(attrs) {
prioritet <- get_attribute(attrs, "prioritet")
if (is.null(prioritet)) stop("Greška: prioritet nije definiran prije zauzimanja doktora!")
print(paste("Seizing doctor with priority:", prioritet))
return(prioritet)
}) %>%
timeout(function(attrs) {
hitnost <- get_attribute(attrs, "hitnost")
if (is.null(hitnost)) stop("Greška: hitnost nije definirana prije određivanja vremena obrade!")
t <- vrijeme_obrade(hitnost)
print(paste("Vrijeme obrade:", t))
return(t)
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (doktori) i generatora pacijenata
hospital_sim %>%
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta (numerički identifikatori umjesto stringova)
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena obrade prema hitnosti (koristeći numeričke vrijednosti)
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
set_attribute("hitnost", function() {
h <- odredi_hitnost()
print(paste("Dodijeljena hitnost:", h))
return(h)
}) %>%
set_attribute("prioritet", function(attrs) {
if (!"hitnost" %in% names(attrs)) {
stop("Greška: hitnost nije postavljena prije prioriteta!")
}
p <- prioritet_pacijenta(attrs[["hitnost"]])
print(paste("Dodijeljen prioritet:", p))
return(p)
}) %>%
seize("doktor", 1, priority = function(attrs) {
if (!"prioritet" %in% names(attrs)) {
stop("Greška: prioritet nije postavljen prije zauzimanja doktora!")
}
print(paste("Seizing doctor with priority:", attrs[["prioritet"]]))
return(attrs[["prioritet"]])
}) %>%
timeout(function(attrs) {
if (!"hitnost" %in% names(attrs)) {
stop("Greška: hitnost nije postavljena prije određivanja vremena obrade!")
}
t <- vrijeme_obrade(attrs[["hitnost"]])
print(paste("Vrijeme obrade:", t))
return(t)
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (doktori) i generatora pacijenata
hospital_sim %>%
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta (numerički identifikatori umjesto stringova)
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena obrade prema hitnosti (koristeći numeričke vrijednosti)
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
set_attribute("hitnost", odredi_hitnost) %>%
timeout(0) %>%  # Kratki pauza da bi hitnost bila postavljena prije prioriteta
set_attribute("prioritet", function(attrs) {
hitnost <- attrs[["hitnost"]]
if (is.null(hitnost)) stop("Greška: hitnost nije postavljena prije prioriteta!")
p <- prioritet_pacijenta(hitnost)
print(paste("Dodijeljen prioritet:", p))
return(p)
}) %>%
seize("doktor", 1, priority = function(attrs) {
prioritet <- attrs[["prioritet"]]
if (is.null(prioritet)) stop("Greška: prioritet nije postavljen prije zauzimanja doktora!")
print(paste("Seizing doctor with priority:", prioritet))
return(prioritet)
}) %>%
timeout(function(attrs) {
hitnost <- attrs[["hitnost"]]
if (is.null(hitnost)) stop("Greška: hitnost nije postavljena prije određivanja vremena obrade!")
t <- vrijeme_obrade(hitnost)
print(paste("Vrijeme obrade:", t))
return(t)
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (doktori) i generatora pacijenata
hospital_sim %>%
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena trijaže (eksponencijalna distribucija)
vrijeme_trijaze <- function() {
rexp(1, 1/10)  # Prosječno 10 minuta za trijažu
}
# Funkcija za određivanje vremena obrade pacijenta prema hitnosti
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
seize("trijaza", 1) %>%  # Pacijent dolazi na trijažu
timeout(vrijeme_trijaze) %>%  # Vrijeme trajanja trijaže
set_attribute("hitnost", odredi_hitnost) %>%  # Određivanje hitnosti
release("trijaza", 1) %>%  # Oslobađanje trijažnog osoblja
set_attribute("prioritet", function(attrs) attrs[["hitnost"]]) %>%
seize("doktor", 1, priority = function(attrs) attrs[["prioritet"]]) %>%  # Pacijent čeka doktora prema prioritetu
timeout(function(attrs) vrijeme_obrade(attrs[["hitnost"]])) %>%  # Vrijeme obrade kod doktora
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (trijaža i doktori) i generatora pacijenata
hospital_sim %>%
add_resource("trijaza", capacity = 5) %>%  # Pretpostavka: 5 trijažnih mjesta
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena trijaže (eksponencijalna distribucija)
vrijeme_trijaze <- function() {
rexp(1, 1/10)  # Prosječno 10 minuta za trijažu
}
# Funkcija za određivanje vremena obrade pacijenta prema hitnosti
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
seize("trijaza", 1) %>%  # Pacijent dolazi na trijažu
timeout(vrijeme_trijaze) %>%  # Vrijeme trajanja trijaže
set_attribute("hitnost", odredi_hitnost) %>%  # Određivanje hitnosti
timeout(0) %>%  # Osigurava da se hitnost postavi prije nego što se koristi
release("trijaza", 1) %>%  # Oslobađanje trijažnog osoblja
set_attribute("prioritet", function(attrs) {
if (!"hitnost" %in% names(attrs)) stop("Greška: hitnost nije postavljena prije prioriteta!")
return(attrs[["hitnost"]])
}) %>%
seize("doktor", 1, priority = function(attrs) {
if (!"prioritet" %in% names(attrs)) stop("Greška: prioritet nije postavljen prije zauzimanja doktora!")
return(attrs[["prioritet"]])
}) %>%
timeout(function(attrs) {
if (!"hitnost" %in% names(attrs)) stop("Greška: hitnost nije postavljena prije određivanja vremena obrade!")
return(vrijeme_obrade(attrs[["hitnost"]]))
}) %>%
release("doktor", 1)  # Oslobađanje doktora
# Dodavanje resursa (trijaža i doktori) i generatora pacijenata
hospital_sim %>%
add_resource("trijaza", capacity = 5) %>%  # Pretpostavka: 5 trijažnih mjesta
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena trijaže (eksponencijalna distribucija)
vrijeme_trijaze <- function() {
rexp(1, 1/10)  # Prosječno 10 minuta za trijažu
}
# Funkcija za određivanje vremena obrade pacijenta prema hitnosti
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
seize("trijaza", 1) %>%  # Pacijent dolazi na trijažu
timeout(vrijeme_trijaze) %>%  # Vrijeme trajanja trijaže
set_attribute("hitnost", function() {
h <- odredi_hitnost()
return(h)
}) %>%  # Određivanje hitnosti
release("trijaza", 1) %>%  # Oslobađanje trijažnog osoblja
branch(
function(attrs) attrs["hitnost"],
continue = c(TRUE, TRUE, TRUE, TRUE),
trajectory("Crveni") %>%
set_prioritization(c(1, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Žuti") %>%
set_prioritization(c(2, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Zeleni") %>%
set_prioritization(c(3, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Plavi") %>%
set_prioritization(c(4, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1)
)
# Dodavanje resursa (trijaža i doktori) i generatora pacijenata
hospital_sim %>%
add_resource("trijaza", capacity = 5) %>%  # Pretpostavka: 5 trijažnih mjesta
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
# Pokretanje simulacije na 24 sata
hospital_sim %>% run(until = 1440)
# Učitavanje potrebnih paketa
library(simmer)
# Inicijalizacija simulacije
hospital_sim <- simmer("Hitni Prijem KBC Split")
# Definiranje parametara na temelju podataka OHBP KBC Split
prosjecni_dolasci <- runif(1, 300, 500) / 1440  # Nasumičan broj pacijenata između 300 i 500 dnevno
broj_doktora <- 32  # Broj liječnika koji dežuraju u 24 sata
# Funkcija za dodjelu hitnosti pacijenta
odredi_hitnost <- function() {
sample(1:4, 1, prob = c(0.1, 0.3, 0.4, 0.2))  # 1 = crveni, 2 = žuti, 3 = zeleni, 4 = plavi
}
# Funkcija za određivanje vremena trijaže (eksponencijalna distribucija)
vrijeme_trijaze <- function() {
rexp(1, 1/10)  # Prosječno 10 minuta za trijažu
}
# Funkcija za određivanje vremena obrade pacijenta prema hitnosti
vrijeme_obrade <- function(hitnost) {
switch(as.character(hitnost),
"1" = rexp(1, 1/60),   # Kritični pacijenti (kraće vrijeme obrade)
"2" = rexp(1, 1/120),  # Ozbiljni pacijenti
"3" = rexp(1, 1/180),  # Manje hitni pacijenti
"4" = rexp(1, 1/240))  # Nehitni pacijenti
}
# Funkcija za određivanje prioriteta (manji broj = veći prioritet)
prioritet_pacijenta <- function(hitnost) {
return(hitnost)  # Crveni (1) ima najviši prioritet, plavi (4) najniži
}
# Kreiranje procesa pacijenta
patient_trajectory <- trajectory("Put pacijenta") %>%
seize("trijaza", 1) %>%  # Pacijent dolazi na trijažu
timeout(vrijeme_trijaze) %>%  # Vrijeme trajanja trijaže
set_attribute("hitnost", function() {
h <- odredi_hitnost()
return(h)
}) %>%  # Određivanje hitnosti
release("trijaza", 1) %>%  # Oslobađanje trijažnog osoblja
branch(
function(attrs) attrs["hitnost"],
continue = c(TRUE, TRUE, TRUE, TRUE),
trajectory("Crveni") %>%
set_prioritization(c(1, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Žuti") %>%
set_prioritization(c(2, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Zeleni") %>%
set_prioritization(c(3, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1),
trajectory("Plavi") %>%
set_prioritization(c(4, 7, TRUE)) %>%
seize("doktor", 1) %>%
timeout(function(attrs) vrijeme_obrade(attrs["hitnost"])) %>%
release("doktor", 1)
)
# Dodavanje resursa (trijaža i doktori) i generatora pacijenata
hospital_sim %>%
add_resource("trijaza", capacity = 5) %>%  # Pretpostavka: 5 trijažnih mjesta
add_resource("doktor", capacity = broj_doktora, preemptive = TRUE) %>%
add_generator("Pacijent", patient_trajectory, function() rexp(1, prosjecni_dolasci))
hospital_sim %>% run(until = 1440)
